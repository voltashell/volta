AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Flock - Distributed AI Agent System on ECS Fargate'

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC
  
  PublicSubnetCIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet
  
  PrivateSubnetCIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for private subnet
  
  AgentCount:
    Type: Number
    Default: 3
    MinValue: 1
    MaxValue: 10
    Description: Number of agent tasks to run

Resources:
  # VPC Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: ai-flock-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ai-flock-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ai-flock-public-subnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: ai-flock-private-subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ai-flock-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  NATSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for NATS service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 4222
          ToPort: 4222
          SourceSecurityGroupId: !Ref AgentSecurityGroup
        - IpProtocol: tcp
          FromPort: 8222
          ToPort: 8222
          CidrIp: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: ai-flock-nats-sg

  AgentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Agent tasks
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ai-flock-agent-sg

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref AgentSecurityGroup
      Tags:
        - Key: Name
          Value: ai-flock-efs-sg

  # EFS for Shared Storage
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      FileSystemTags:
        - Key: Name
          Value: ai-flock-efs

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PublicSubnet
      SecurityGroups:
        - !Ref EFSSecurityGroup

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PrivateSubnet
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref FileSystem
      PosixUser:
        Uid: 1001
        Gid: 1001
      RootDirectory:
        CreationInfo:
          OwnerGid: 1001
          OwnerUid: 1001
          Permissions: '755'
        Path: /shared

  # IAM Roles
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: EFSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                Resource: !GetAtt FileSystem.Arn

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: ai-flock-agent
      ImageScanningConfiguration:
        ScanOnPush: true

  # CloudWatch Log Groups
  NATSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/ai-flock-nats
      RetentionInDays: 7

  AgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/ai-flock-agent
      RetentionInDays: 7

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ai-flock-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # Service Discovery Namespace
  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: ai-flock.local
      Vpc: !Ref VPC

  # NATS Service Discovery
  NATSServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: nats
      NamespaceId: !Ref ServiceDiscoveryNamespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60

  # NATS Task Definition
  NATSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ai-flock-nats
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: nats
          Image: nats:2.10-alpine
          Essential: true
          Command:
            - '-m'
            - '8222'
            - '-js'
          PortMappings:
            - ContainerPort: 4222
              Protocol: tcp
            - ContainerPort: 8222
              Protocol: tcp
          HealthCheck:
            Command:
              - CMD-SHELL
              - wget --no-verbose --tries=1 --spider http://localhost:8222/healthz || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 10
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref NATSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: nats

  # NAT Gateway for private subnet
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPForNAT.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: ai-flock-nat-gateway

  EIPForNAT:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ai-flock-private-rt

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # NATS Service
  NATSService:
    Type: AWS::ECS::Service
    DependsOn:
      - NATSLogGroup
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref NATSTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet
          SecurityGroups:
            - !Ref NATSSecurityGroup
          AssignPublicIp: DISABLED
      ServiceRegistries:
        - RegistryArn: !GetAtt NATSServiceDiscovery.Arn

  # Agent Task Definition
  AgentTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ai-flock-agent
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: agent
          Image: node:18-alpine
          Essential: true
          Command:
            - sh
            - -c
            - |
              echo "Placeholder agent - update image to ai-flock-agent after pushing to ECR"
              echo "NATS_URL: $NATS_URL"
              echo "SHARED_DIR: $SHARED_DIR"
              while true; do
                echo "Agent placeholder running... $(date)"
                sleep 30
              done
          Environment:
            - Name: NATS_URL
              Value: nats://nats.ai-flock.local:4222
            - Name: SHARED_DIR
              Value: /shared
          MountPoints:
            - SourceVolume: shared-storage
              ContainerPath: /shared
          ReadonlyRootFilesystem: false
          HealthCheck:
            Command:
              - CMD-SHELL
              - echo "healthy" || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 10
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AgentLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: agent
      Volumes:
        - Name: shared-storage
          EFSVolumeConfiguration:
            FilesystemId: !Ref FileSystem
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !Ref EFSAccessPoint

  # Agent Service
  AgentService:
    Type: AWS::ECS::Service
    DependsOn:
      - NATSService
      - AgentLogGroup
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref AgentTaskDefinition
      LaunchType: FARGATE
      DesiredCount: !Ref AgentCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet
          SecurityGroups:
            - !Ref AgentSecurityGroup
          AssignPublicIp: DISABLED

Outputs:
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ClusterName

  ECRRepository:
    Description: ECR Repository URI
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ai-flock-agent
    Export:
      Name: !Sub ${AWS::StackName}-ECRRepository

  FileSystemId:
    Description: EFS File System ID
    Value: !Ref FileSystem
    Export:
      Name: !Sub ${AWS::StackName}-FileSystemId

  NATSServiceEndpoint:
    Description: NATS Service Discovery Endpoint
    Value: nats.ai-flock.local
    Export:
      Name: !Sub ${AWS::StackName}-NATSEndpoint